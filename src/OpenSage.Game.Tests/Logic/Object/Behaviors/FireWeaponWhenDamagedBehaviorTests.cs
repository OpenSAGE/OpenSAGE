using OpenSage.Content;
using OpenSage.Logic.Object;
using OpenSage.Tests.Logic.Object.Update;
using Xunit;

namespace OpenSage.Tests.Logic.Object.Behaviors;

public class FireWeaponWhenDamagedBehaviorTests : UpdateModuleTest<FireWeaponWhenDamagedBehavior, FireWeaponWhenDamagedBehaviorModuleData>
{
    private static readonly byte[] ZeroHourUpgradeTriggeredNoWeaponFired = [0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x1e, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x50, 0x6f, 0x69, 0x73, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x1f, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x50, 0x6f, 0x69, 0x73, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];

    [Fact]
    public void ZeroHour_UpgradeTriggeredNoWeaponFired_V1()
    {
        var stream = SaveData(ZeroHourUpgradeTriggeredNoWeaponFired);
        var reader = new StateReader(stream, ZeroHour);
        var behavior = CreateTestModule();
        behavior.Load(reader);

        Assert.True(behavior.UpgradeLogic.Triggered);

        Assert.Null(behavior.ReactionWeapons[0]);
        Assert.Null(behavior.ReactionWeapons[1]);
        Assert.Null(behavior.ReactionWeapons[2]);
        Assert.Null(behavior.ReactionWeapons[3]);

        Assert.Null(behavior.ContinuousWeapons[0]);
        Assert.NotNull(behavior.ContinuousWeapons[1]);
        Assert.NotNull(behavior.ContinuousWeapons[2]);
        Assert.Null(behavior.ContinuousWeapons[3]);

        // TODO: Assert some weapon values, once they're understood.
    }

    private static readonly byte[] ZeroHourUpgradeTriggeredContinuousWeaponDamagedFired = [0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x1e, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x50, 0x6f, 0x69, 0x73, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xfd, 0xff, 0xff, 0x7f, 0x09, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x09, 0x00, 0x00, 0xfa, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfd, 0xff, 0xff, 0x7f, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x1f, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x50, 0x6f, 0x69, 0x73, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];

    [Fact]
    public void ZeroHour_UpgradeTriggeredContinuousWeaponDamagedFired_V1()
    {
        var stream = SaveData(ZeroHourUpgradeTriggeredContinuousWeaponDamagedFired);
        var reader = new StateReader(stream, ZeroHour);
        var behavior = CreateTestModule();
        behavior.Load(reader);

        Assert.True(behavior.UpgradeLogic.Triggered);

        Assert.Null(behavior.ReactionWeapons[0]);
        Assert.Null(behavior.ReactionWeapons[1]);
        Assert.Null(behavior.ReactionWeapons[2]);
        Assert.Null(behavior.ReactionWeapons[3]);

        Assert.Null(behavior.ContinuousWeapons[0]);
        Assert.NotNull(behavior.ContinuousWeapons[1]);
        Assert.NotNull(behavior.ContinuousWeapons[2]);
        Assert.Null(behavior.ContinuousWeapons[3]);

        // TODO: Assert some weapon values, once they're understood.
    }

    private static readonly byte[] ZeroHourUpgradeTriggeredContinuousWeaponReallyDamagedFired = [0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x1e, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x50, 0x6f, 0x69, 0x73, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xe7, 0xff, 0xff, 0x7f, 0x53, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0b, 0x00, 0x00, 0x44, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe7, 0xff, 0xff, 0x7f, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x1f, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x50, 0x6f, 0x69, 0x73, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xfd, 0xff, 0xff, 0x7f, 0x6d, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5e, 0x0b, 0x00, 0x00, 0x5e, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfd, 0xff, 0xff, 0x7f, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];

    [Fact]
    public void ZeroHour_UpgradeTriggeredContinuousWeaponReallyDamagedFired_V1()
    {
        var stream = SaveData(ZeroHourUpgradeTriggeredContinuousWeaponReallyDamagedFired);
        var reader = new StateReader(stream, ZeroHour);
        var behavior = CreateTestModule();
        behavior.Load(reader);

        Assert.True(behavior.UpgradeLogic.Triggered);

        Assert.Null(behavior.ReactionWeapons[0]);
        Assert.Null(behavior.ReactionWeapons[1]);
        Assert.Null(behavior.ReactionWeapons[2]);
        Assert.Null(behavior.ReactionWeapons[3]);

        Assert.Null(behavior.ContinuousWeapons[0]);
        Assert.NotNull(behavior.ContinuousWeapons[1]);
        Assert.NotNull(behavior.ContinuousWeapons[2]);
        Assert.Null(behavior.ContinuousWeapons[3]);

        // TODO: Assert some weapon values, once they're understood.
    }

    private FireWeaponWhenDamagedBehavior CreateTestModule()
    {
        var objectDefinition = new ObjectDefinition();
        var gameObject = new GameObject(objectDefinition, ZeroHour.Context, null);

        return SampleModule(null, CreateTestModuleData(), gameObject);
    }

    private static FireWeaponWhenDamagedBehaviorModuleData CreateTestModuleData() => new FireWeaponWhenDamagedBehaviorModuleData
    {
        ContinuousWeaponDamaged = new LazyAssetReference<WeaponTemplate>(new WeaponTemplate { Name = "SmallPoisonFieldWeaponUpgraded" }),
        ContinuousWeaponReallyDamaged = new LazyAssetReference<WeaponTemplate>(new WeaponTemplate { Name = "MediumPoisonFieldWeaponUpgraded" }),
    };
}
